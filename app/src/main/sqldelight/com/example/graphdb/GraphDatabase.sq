CREATE TABLE node (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  name TEXT NOT NULL,
  type TEXT NOT NULL,
  description TEXT
);

CREATE TABLE edge (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    fromNode INTEGER NOT NULL,
    toNode INTEGER NOT NULL,
    relationType TEXT NOT NULL,
    FOREIGN KEY (fromNode) REFERENCES node(id),
    FOREIGN KEY (toNode) REFERENCES node(id)
);

-- Node Functions --
selectAllNodes:
SELECT * FROM node;

getNodeTypes:
SELECT DISTINCT type FROM node;

insertNode:
INSERT INTO node(name, type, description) VALUES (?,?, ?);

checkDuplicateNode:
SELECT COUNT(*) FROM node WHERE name = ? AND type = ?;

findNodeById:
SELECT * FROM node WHERE id = ?;

findNodeByNameAndType:
SELECT id FROM node WHERE name = ? AND type = ?;

getNeighborsOfNodeById:
SELECT n.*
FROM edge e
JOIN node n ON n.id =
    CASE
        WHEN e.fromNode = ? THEN e.toNode
        WHEN e.toNode = ? THEN e.fromNode
    END
WHERE e.fromNode = ? OR e.toNode = ?;

getDescOfNodeById:
SELECT n.*
FROM edge e
JOIN node n ON n.id = e.fromNode
WHERE e.toNode = ?
  AND n.type = 'Description';


-- Edge Functions --
selectAllEdges:
SELECT * FROM edge;

getEdgeTypes:
SELECT DISTINCT relationType FROM edge;

insertEdge:
INSERT INTO edge(fromNode, toNode, relationType) VALUES (?,?, ?);

checkDuplicateEdge:
SELECT COUNT(*) FROM edge WHERE fromNode = ? AND toNode = ? AND relationType = ?;

findFromNodeByToNode:
SELECT fromNode FROM edge WHERE toNode = ?;

getEdgeBetweenNodes:
SELECT * FROM edge WHERE (fromNode = ? AND toNode = ?) OR (toNode = ? AND fromNode = ?);

-- General Functions --
getRelation:
SELECT n1.name || ' --[' || e.relationType || ']--> ' || n2.name AS relation
FROM edge e
JOIN node n1 ON e.fromNode = n1.id
JOIN node n2 ON e.toNode = n2.id;